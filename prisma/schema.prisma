// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum For {
    SITTER
    EMPLOYEE
}

model Account {
    id                String  @id @default(cuid())
    userId            Int     @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique @map("session_token")
    userId       Int      @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id             Int             @id @default(autoincrement())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?       @map("email_verified")
    password       String?
    image          String?
    accounts       Account[]
    sessions       Session[]
    Authenticator  Authenticator[]
    sitterProfile  SitterProfile?
    reviews        Review[]        @relation("ReviewerToReviewee")
    reviewRecieved Review[]        @relation("RevieweeToReviewer")
    bookings       Booking[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Authenticator {
    id                   Int     @id @default(autoincrement())
    credentialID         String  @unique
    userId               Int
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SitterProfile {
    id         Int       @id @default(autoincrement())
    userId     Int       @unique
    name       String
    city       String
    hourlyRate String    @map("hourly_rate_euro")
    createdAt  DateTime  @default(now()) @map("created_at")
    updatedAt  DateTime  @updatedAt @map("updated_at")
    bookings   Booking[]
    user       User      @relation(fields: [userId], references: [id])
}

model Booking {
    id          Int           @id @default(autoincrement())
    start       DateTime      @map("starts_at")
    end         DateTime      @map("end_at")
    isCancel    Boolean       @default(false)
    description String
    createdAt   DateTime      @default(now()) @map("created_at")
    updatedAt   DateTime      @updatedAt @map("updated_at")
    bookerId    Int
    booker      User          @relation(fields: [bookerId], references: [id])
    bookeeId    Int
    Bookee      SitterProfile @relation(fields: [bookeeId], references: [id])
}

model Review {
    id         Int      @id @default(autoincrement())
    score      Int
    message    String?
    for        For      @default(EMPLOYEE)
    reviewerId Int
    reviewer   User     @relation("ReviewerToReviewee", fields: [reviewerId], references: [id])
    revieweeId Int
    reviewee   User     @relation("RevieweeToReviewer", fields: [revieweeId], references: [id])
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")
}
